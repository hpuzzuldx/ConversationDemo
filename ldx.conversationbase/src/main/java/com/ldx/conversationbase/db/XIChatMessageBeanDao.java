package com.ldx.conversationbase.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "XICHAT_MESSAGE_BEAN".
*/
public class XIChatMessageBeanDao extends AbstractDao<XIChatMessageBean, Long> {

    public static final String TABLENAME = "XICHAT_MESSAGE_BEAN";

    /**
     * Properties of entity XIChatMessageBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property UserId = new Property(1, String.class, "UserId", false, "UserId");
        public final static Property UserName = new Property(2, String.class, "UserName", false, "UserName");
        public final static Property UserHeadIcon = new Property(3, String.class, "UserHeadIcon", false, "UserHeadIcon");
        public final static Property UserContent = new Property(4, String.class, "UserContent", false, "UserContent");
        public final static Property Time = new Property(5, String.class, "time", false, "time");
        public final static Property Type = new Property(6, int.class, "type", false, "type");
        public final static Property Messagetype = new Property(7, int.class, "Messagetype", false, "Messagetype");
        public final static Property UserVoiceTime = new Property(8, float.class, "UserVoiceTime", false, "UserVoiceTime");
        public final static Property UserVoicePath = new Property(9, String.class, "UserVoicePath", false, "UserVoicePath");
        public final static Property UserVoiceUrl = new Property(10, String.class, "UserVoiceUrl", false, "UserVoiceUrl");
        public final static Property SendState = new Property(11, int.class, "sendState", false, "sendState");
        public final static Property ImageUrl = new Property(12, String.class, "imageUrl", false, "imageUrl");
        public final static Property ImageIconUrl = new Property(13, String.class, "imageIconUrl", false, "imageIconUrl");
        public final static Property ImageLocal = new Property(14, String.class, "imageLocal", false, "imageLocal");
        public final static Property ImageOriginal = new Property(15, String.class, "imageOriginal", false, "imageOriginal");
        public final static Property JsonString = new Property(16, String.class, "jsonString", false, "jsonString");
        public final static Property AlreadyReady = new Property(17, boolean.class, "alreadyReady", false, "alreadyReady");
        public final static Property CardTitle = new Property(18, String.class, "cardTitle", false, "cardTitle");
        public final static Property CardDescription = new Property(19, String.class, "cardDescription", false, "cardDescription");
        public final static Property WebUrl = new Property(20, String.class, "webUrl", false, "webUrl");
        public final static Property ImgWidth = new Property(21, int.class, "imgWidth", false, "imgWidth");
        public final static Property ImgHeight = new Property(22, int.class, "imgHeight", false, "imgHeight");
        public final static Property CreateTime = new Property(23, long.class, "createTime", false, "createTime");
        public final static Property TimeStamp = new Property(24, long.class, "timeStamp", false, "timeStamp");
        public final static Property IsGif = new Property(25, boolean.class, "isGif", false, "isGif");
        public final static Property FeedId = new Property(26, String.class, "feedId", false, "feedId");
        public final static Property Reserved1 = new Property(27, String.class, "reserved1", false, "reserved1");
    }


    public XIChatMessageBeanDao(DaoConfig config) {
        super(config);
    }
    
    public XIChatMessageBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"XICHAT_MESSAGE_BEAN\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"UserId\" TEXT," + // 1: UserId
                "\"UserName\" TEXT," + // 2: UserName
                "\"UserHeadIcon\" TEXT," + // 3: UserHeadIcon
                "\"UserContent\" TEXT," + // 4: UserContent
                "\"time\" TEXT," + // 5: time
                "\"type\" INTEGER NOT NULL ," + // 6: type
                "\"Messagetype\" INTEGER NOT NULL ," + // 7: Messagetype
                "\"UserVoiceTime\" REAL NOT NULL ," + // 8: UserVoiceTime
                "\"UserVoicePath\" TEXT," + // 9: UserVoicePath
                "\"UserVoiceUrl\" TEXT," + // 10: UserVoiceUrl
                "\"sendState\" INTEGER NOT NULL ," + // 11: sendState
                "\"imageUrl\" TEXT," + // 12: imageUrl
                "\"imageIconUrl\" TEXT," + // 13: imageIconUrl
                "\"imageLocal\" TEXT," + // 14: imageLocal
                "\"imageOriginal\" TEXT," + // 15: imageOriginal
                "\"jsonString\" TEXT," + // 16: jsonString
                "\"alreadyReady\" INTEGER NOT NULL ," + // 17: alreadyReady
                "\"cardTitle\" TEXT," + // 18: cardTitle
                "\"cardDescription\" TEXT," + // 19: cardDescription
                "\"webUrl\" TEXT," + // 20: webUrl
                "\"imgWidth\" INTEGER NOT NULL ," + // 21: imgWidth
                "\"imgHeight\" INTEGER NOT NULL ," + // 22: imgHeight
                "\"createTime\" INTEGER NOT NULL ," + // 23: createTime
                "\"timeStamp\" INTEGER NOT NULL ," + // 24: timeStamp
                "\"isGif\" INTEGER NOT NULL ," + // 25: isGif
                "\"feedId\" TEXT," + // 26: feedId
                "\"reserved1\" TEXT);"); // 27: reserved1
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"XICHAT_MESSAGE_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, XIChatMessageBean entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String UserId = entity.getUserId();
        if (UserId != null) {
            stmt.bindString(2, UserId);
        }
 
        String UserName = entity.getUserName();
        if (UserName != null) {
            stmt.bindString(3, UserName);
        }
 
        String UserHeadIcon = entity.getUserHeadIcon();
        if (UserHeadIcon != null) {
            stmt.bindString(4, UserHeadIcon);
        }
 
        String UserContent = entity.getUserContent();
        if (UserContent != null) {
            stmt.bindString(5, UserContent);
        }
 
        String time = entity.getTime();
        if (time != null) {
            stmt.bindString(6, time);
        }
        stmt.bindLong(7, entity.getType());
        stmt.bindLong(8, entity.getMessagetype());
        stmt.bindDouble(9, entity.getUserVoiceTime());
 
        String UserVoicePath = entity.getUserVoicePath();
        if (UserVoicePath != null) {
            stmt.bindString(10, UserVoicePath);
        }
 
        String UserVoiceUrl = entity.getUserVoiceUrl();
        if (UserVoiceUrl != null) {
            stmt.bindString(11, UserVoiceUrl);
        }
        stmt.bindLong(12, entity.getSendState());
 
        String imageUrl = entity.getImageUrl();
        if (imageUrl != null) {
            stmt.bindString(13, imageUrl);
        }
 
        String imageIconUrl = entity.getImageIconUrl();
        if (imageIconUrl != null) {
            stmt.bindString(14, imageIconUrl);
        }
 
        String imageLocal = entity.getImageLocal();
        if (imageLocal != null) {
            stmt.bindString(15, imageLocal);
        }
 
        String imageOriginal = entity.getImageOriginal();
        if (imageOriginal != null) {
            stmt.bindString(16, imageOriginal);
        }
 
        String jsonString = entity.getJsonString();
        if (jsonString != null) {
            stmt.bindString(17, jsonString);
        }
        stmt.bindLong(18, entity.getAlreadyReady() ? 1L: 0L);
 
        String cardTitle = entity.getCardTitle();
        if (cardTitle != null) {
            stmt.bindString(19, cardTitle);
        }
 
        String cardDescription = entity.getCardDescription();
        if (cardDescription != null) {
            stmt.bindString(20, cardDescription);
        }
 
        String webUrl = entity.getWebUrl();
        if (webUrl != null) {
            stmt.bindString(21, webUrl);
        }
        stmt.bindLong(22, entity.getImgWidth());
        stmt.bindLong(23, entity.getImgHeight());
        stmt.bindLong(24, entity.getCreateTime());
        stmt.bindLong(25, entity.getTimeStamp());
        stmt.bindLong(26, entity.getIsGif() ? 1L: 0L);
 
        String feedId = entity.getFeedId();
        if (feedId != null) {
            stmt.bindString(27, feedId);
        }
 
        String reserved1 = entity.getReserved1();
        if (reserved1 != null) {
            stmt.bindString(28, reserved1);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, XIChatMessageBean entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String UserId = entity.getUserId();
        if (UserId != null) {
            stmt.bindString(2, UserId);
        }
 
        String UserName = entity.getUserName();
        if (UserName != null) {
            stmt.bindString(3, UserName);
        }
 
        String UserHeadIcon = entity.getUserHeadIcon();
        if (UserHeadIcon != null) {
            stmt.bindString(4, UserHeadIcon);
        }
 
        String UserContent = entity.getUserContent();
        if (UserContent != null) {
            stmt.bindString(5, UserContent);
        }
 
        String time = entity.getTime();
        if (time != null) {
            stmt.bindString(6, time);
        }
        stmt.bindLong(7, entity.getType());
        stmt.bindLong(8, entity.getMessagetype());
        stmt.bindDouble(9, entity.getUserVoiceTime());
 
        String UserVoicePath = entity.getUserVoicePath();
        if (UserVoicePath != null) {
            stmt.bindString(10, UserVoicePath);
        }
 
        String UserVoiceUrl = entity.getUserVoiceUrl();
        if (UserVoiceUrl != null) {
            stmt.bindString(11, UserVoiceUrl);
        }
        stmt.bindLong(12, entity.getSendState());
 
        String imageUrl = entity.getImageUrl();
        if (imageUrl != null) {
            stmt.bindString(13, imageUrl);
        }
 
        String imageIconUrl = entity.getImageIconUrl();
        if (imageIconUrl != null) {
            stmt.bindString(14, imageIconUrl);
        }
 
        String imageLocal = entity.getImageLocal();
        if (imageLocal != null) {
            stmt.bindString(15, imageLocal);
        }
 
        String imageOriginal = entity.getImageOriginal();
        if (imageOriginal != null) {
            stmt.bindString(16, imageOriginal);
        }
 
        String jsonString = entity.getJsonString();
        if (jsonString != null) {
            stmt.bindString(17, jsonString);
        }
        stmt.bindLong(18, entity.getAlreadyReady() ? 1L: 0L);
 
        String cardTitle = entity.getCardTitle();
        if (cardTitle != null) {
            stmt.bindString(19, cardTitle);
        }
 
        String cardDescription = entity.getCardDescription();
        if (cardDescription != null) {
            stmt.bindString(20, cardDescription);
        }
 
        String webUrl = entity.getWebUrl();
        if (webUrl != null) {
            stmt.bindString(21, webUrl);
        }
        stmt.bindLong(22, entity.getImgWidth());
        stmt.bindLong(23, entity.getImgHeight());
        stmt.bindLong(24, entity.getCreateTime());
        stmt.bindLong(25, entity.getTimeStamp());
        stmt.bindLong(26, entity.getIsGif() ? 1L: 0L);
 
        String feedId = entity.getFeedId();
        if (feedId != null) {
            stmt.bindString(27, feedId);
        }
 
        String reserved1 = entity.getReserved1();
        if (reserved1 != null) {
            stmt.bindString(28, reserved1);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public XIChatMessageBean readEntity(Cursor cursor, int offset) {
        XIChatMessageBean entity = new XIChatMessageBean( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // UserId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // UserName
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // UserHeadIcon
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // UserContent
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // time
            cursor.getInt(offset + 6), // type
            cursor.getInt(offset + 7), // Messagetype
            cursor.getFloat(offset + 8), // UserVoiceTime
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // UserVoicePath
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // UserVoiceUrl
            cursor.getInt(offset + 11), // sendState
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // imageUrl
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // imageIconUrl
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // imageLocal
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15), // imageOriginal
            cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16), // jsonString
            cursor.getShort(offset + 17) != 0, // alreadyReady
            cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18), // cardTitle
            cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19), // cardDescription
            cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20), // webUrl
            cursor.getInt(offset + 21), // imgWidth
            cursor.getInt(offset + 22), // imgHeight
            cursor.getLong(offset + 23), // createTime
            cursor.getLong(offset + 24), // timeStamp
            cursor.getShort(offset + 25) != 0, // isGif
            cursor.isNull(offset + 26) ? null : cursor.getString(offset + 26), // feedId
            cursor.isNull(offset + 27) ? null : cursor.getString(offset + 27) // reserved1
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, XIChatMessageBean entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setUserId(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setUserName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setUserHeadIcon(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setUserContent(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setTime(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setType(cursor.getInt(offset + 6));
        entity.setMessagetype(cursor.getInt(offset + 7));
        entity.setUserVoiceTime(cursor.getFloat(offset + 8));
        entity.setUserVoicePath(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setUserVoiceUrl(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setSendState(cursor.getInt(offset + 11));
        entity.setImageUrl(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setImageIconUrl(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setImageLocal(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setImageOriginal(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
        entity.setJsonString(cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16));
        entity.setAlreadyReady(cursor.getShort(offset + 17) != 0);
        entity.setCardTitle(cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18));
        entity.setCardDescription(cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19));
        entity.setWebUrl(cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20));
        entity.setImgWidth(cursor.getInt(offset + 21));
        entity.setImgHeight(cursor.getInt(offset + 22));
        entity.setCreateTime(cursor.getLong(offset + 23));
        entity.setTimeStamp(cursor.getLong(offset + 24));
        entity.setIsGif(cursor.getShort(offset + 25) != 0);
        entity.setFeedId(cursor.isNull(offset + 26) ? null : cursor.getString(offset + 26));
        entity.setReserved1(cursor.isNull(offset + 27) ? null : cursor.getString(offset + 27));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(XIChatMessageBean entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(XIChatMessageBean entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(XIChatMessageBean entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
